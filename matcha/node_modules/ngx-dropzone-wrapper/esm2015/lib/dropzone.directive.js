import { __decorate, __param } from "tslib";
import Dropzone from 'dropzone';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgZone, Inject, Optional, ElementRef, Renderer2, Directive, OnInit, OnDestroy, DoCheck, OnChanges, Input, Output, EventEmitter, SimpleChanges, KeyValueDiffer, KeyValueDiffers } from '@angular/core';
import { DROPZONE_CONFIG, DropzoneConfig, DropzoneEvents } from './dropzone.interfaces';
let DropzoneDirective = class DropzoneDirective {
    constructor(zone, renderer, elementRef, differs, platformId, defaults) {
        this.zone = zone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.differs = differs;
        this.platformId = platformId;
        this.defaults = defaults;
        this.configDiff = null;
        this.disabled = false;
        this.DZ_INIT = new EventEmitter();
        this.DZ_ERROR = new EventEmitter();
        this.DZ_SUCCESS = new EventEmitter();
        this.DZ_SENDING = new EventEmitter();
        this.DZ_CANCELED = new EventEmitter();
        this.DZ_COMPLETE = new EventEmitter();
        this.DZ_PROCESSING = new EventEmitter();
        this.DZ_DROP = new EventEmitter();
        this.DZ_DRAGSTART = new EventEmitter();
        this.DZ_DRAGEND = new EventEmitter();
        this.DZ_DRAGENTER = new EventEmitter();
        this.DZ_DRAGOVER = new EventEmitter();
        this.DZ_DRAGLEAVE = new EventEmitter();
        this.DZ_THUMBNAIL = new EventEmitter();
        this.DZ_ADDEDFILE = new EventEmitter();
        this.DZ_REMOVEDFILE = new EventEmitter();
        this.DZ_UPLOADPROGRESS = new EventEmitter();
        this.DZ_MAXFILESREACHED = new EventEmitter();
        this.DZ_MAXFILESEXCEEDED = new EventEmitter();
        this.DZ_SUCCESSMULTIPLE = new EventEmitter();
        this.DZ_SENDINGMULTIPLE = new EventEmitter();
        this.DZ_CANCELEDMULTIPLE = new EventEmitter();
        this.DZ_COMPLETEMULTIPLE = new EventEmitter();
        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();
        this.DZ_RESET = new EventEmitter();
        this.DZ_QUEUECOMPLETE = new EventEmitter();
        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();
        const dz = Dropzone;
        dz.autoDiscover = false;
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const params = new DropzoneConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        this.renderer.addClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');
        this.renderer.removeClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');
        this.zone.runOutsideAngular(() => {
            this.instance = new Dropzone(this.elementRef.nativeElement, params);
        });
        if (this.disabled) {
            this.instance.disable();
        }
        if (this.DZ_INIT.observers.length) {
            this.zone.run(() => {
                this.DZ_INIT.emit(this.instance);
            });
        }
        // Add auto reset handling for events
        this.instance.on('success', () => {
            if (params.autoReset != null) {
                setTimeout(() => this.reset(), params.autoReset);
            }
        });
        this.instance.on('error', () => {
            if (params.errorReset != null) {
                setTimeout(() => this.reset(), params.errorReset);
            }
        });
        this.instance.on('canceled', () => {
            if (params.cancelReset != null) {
                setTimeout(() => this.reset(), params.cancelReset);
            }
        });
        // Add native Dropzone event handling
        DropzoneEvents.forEach((eventName) => {
            this.instance.on(eventName.toLowerCase(), (...args) => {
                args = (args.length === 1) ? args[0] : args;
                const output = `DZ_${eventName.toUpperCase()}`;
                const emitter = this[output];
                if (emitter.observers.length > 0) {
                    this.zone.run(() => {
                        emitter.emit(args);
                    });
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.destroy();
            });
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (!this.disabled && this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes && this.instance) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === false) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.enable();
                    });
                }
                else if (changes['disabled'].currentValue === true) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.disable();
                    });
                }
            }
        }
    }
    dropzone() {
        return this.instance;
    }
    reset(cancel) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.removeAllFiles(cancel);
            });
        }
    }
};
DropzoneDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Renderer2 },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DROPZONE_CONFIG,] }] }
];
__decorate([
    Input()
], DropzoneDirective.prototype, "disabled", void 0);
__decorate([
    Input('dropzone')
], DropzoneDirective.prototype, "config", void 0);
__decorate([
    Output('init')
], DropzoneDirective.prototype, "DZ_INIT", void 0);
__decorate([
    Output('error')
], DropzoneDirective.prototype, "DZ_ERROR", void 0);
__decorate([
    Output('success')
], DropzoneDirective.prototype, "DZ_SUCCESS", void 0);
__decorate([
    Output('sending')
], DropzoneDirective.prototype, "DZ_SENDING", void 0);
__decorate([
    Output('canceled')
], DropzoneDirective.prototype, "DZ_CANCELED", void 0);
__decorate([
    Output('complete')
], DropzoneDirective.prototype, "DZ_COMPLETE", void 0);
__decorate([
    Output('processing')
], DropzoneDirective.prototype, "DZ_PROCESSING", void 0);
__decorate([
    Output('drop')
], DropzoneDirective.prototype, "DZ_DROP", void 0);
__decorate([
    Output('dragStart')
], DropzoneDirective.prototype, "DZ_DRAGSTART", void 0);
__decorate([
    Output('dragEnd')
], DropzoneDirective.prototype, "DZ_DRAGEND", void 0);
__decorate([
    Output('dragEnter')
], DropzoneDirective.prototype, "DZ_DRAGENTER", void 0);
__decorate([
    Output('dragOver')
], DropzoneDirective.prototype, "DZ_DRAGOVER", void 0);
__decorate([
    Output('dragLeave')
], DropzoneDirective.prototype, "DZ_DRAGLEAVE", void 0);
__decorate([
    Output('thumbnail')
], DropzoneDirective.prototype, "DZ_THUMBNAIL", void 0);
__decorate([
    Output('addedFile')
], DropzoneDirective.prototype, "DZ_ADDEDFILE", void 0);
__decorate([
    Output('removedFile')
], DropzoneDirective.prototype, "DZ_REMOVEDFILE", void 0);
__decorate([
    Output('uploadProgress')
], DropzoneDirective.prototype, "DZ_UPLOADPROGRESS", void 0);
__decorate([
    Output('maxFilesReached')
], DropzoneDirective.prototype, "DZ_MAXFILESREACHED", void 0);
__decorate([
    Output('maxFilesExceeded')
], DropzoneDirective.prototype, "DZ_MAXFILESEXCEEDED", void 0);
__decorate([
    Output('successMultiple')
], DropzoneDirective.prototype, "DZ_SUCCESSMULTIPLE", void 0);
__decorate([
    Output('sendingMultiple')
], DropzoneDirective.prototype, "DZ_SENDINGMULTIPLE", void 0);
__decorate([
    Output('canceledMultiple')
], DropzoneDirective.prototype, "DZ_CANCELEDMULTIPLE", void 0);
__decorate([
    Output('completeMultiple')
], DropzoneDirective.prototype, "DZ_COMPLETEMULTIPLE", void 0);
__decorate([
    Output('processingMultiple')
], DropzoneDirective.prototype, "DZ_PROCESSINGMULTIPLE", void 0);
__decorate([
    Output('reset')
], DropzoneDirective.prototype, "DZ_RESET", void 0);
__decorate([
    Output('queueComplete')
], DropzoneDirective.prototype, "DZ_QUEUECOMPLETE", void 0);
__decorate([
    Output('totalUploadProgress')
], DropzoneDirective.prototype, "DZ_TOTALUPLOADPROGRESS", void 0);
DropzoneDirective = __decorate([
    Directive({
        selector: '[dropzone]',
        exportAs: 'ngxDropzone'
    }),
    __param(4, Inject(PLATFORM_ID)),
    __param(5, Optional()), __param(5, Inject(DROPZONE_CONFIG))
], DropzoneDirective);
export { DropzoneDirective };
//# sourceMappingURL=data:application/json;base64,