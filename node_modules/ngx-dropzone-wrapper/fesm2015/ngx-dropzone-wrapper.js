import { __decorate, __param } from 'tslib';
import { InjectionToken, EventEmitter, NgZone, Renderer2, ElementRef, KeyValueDiffers, Inject, PLATFORM_ID, Optional, Input, Output, Directive, ViewChild, Component, ViewEncapsulation, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import Dropzone from 'dropzone';

const DROPZONE_CONFIG = new InjectionToken('DROPZONE_CONFIG');
const DropzoneEvents = [
    'error',
    'success',
    'sending',
    'canceled',
    'complete',
    'processing',
    'drop',
    'dragStart',
    'dragEnd',
    'dragEnter',
    'dragOver',
    'dragLeave',
    'thumbnail',
    'addedFile',
    'removedFile',
    'uploadProgress',
    'maxFilesReached',
    'maxFilesExceeded',
    'successMultiple',
    'sendingMultiple',
    'canceledMultiple',
    'completeMultiple',
    'processingMultiple',
    'reset',
    'queueComplete',
    'totalUploadProgress'
];
class DropzoneConfig {
    constructor(config = {}) {
        this.assign(config);
    }
    assign(config = {}, target) {
        target = target || this;
        for (const key in config) {
            if (config[key] != null && !(Array.isArray(config[key])) &&
                typeof config[key] === 'object' && !(config[key] instanceof HTMLElement)) {
                target[key] = {};
                this.assign(config[key], target[key]);
            }
            else {
                target[key] = config[key];
            }
        }
    }
}

let DropzoneDirective = class DropzoneDirective {
    constructor(zone, renderer, elementRef, differs, platformId, defaults) {
        this.zone = zone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.differs = differs;
        this.platformId = platformId;
        this.defaults = defaults;
        this.configDiff = null;
        this.disabled = false;
        this.DZ_INIT = new EventEmitter();
        this.DZ_ERROR = new EventEmitter();
        this.DZ_SUCCESS = new EventEmitter();
        this.DZ_SENDING = new EventEmitter();
        this.DZ_CANCELED = new EventEmitter();
        this.DZ_COMPLETE = new EventEmitter();
        this.DZ_PROCESSING = new EventEmitter();
        this.DZ_DROP = new EventEmitter();
        this.DZ_DRAGSTART = new EventEmitter();
        this.DZ_DRAGEND = new EventEmitter();
        this.DZ_DRAGENTER = new EventEmitter();
        this.DZ_DRAGOVER = new EventEmitter();
        this.DZ_DRAGLEAVE = new EventEmitter();
        this.DZ_THUMBNAIL = new EventEmitter();
        this.DZ_ADDEDFILE = new EventEmitter();
        this.DZ_REMOVEDFILE = new EventEmitter();
        this.DZ_UPLOADPROGRESS = new EventEmitter();
        this.DZ_MAXFILESREACHED = new EventEmitter();
        this.DZ_MAXFILESEXCEEDED = new EventEmitter();
        this.DZ_SUCCESSMULTIPLE = new EventEmitter();
        this.DZ_SENDINGMULTIPLE = new EventEmitter();
        this.DZ_CANCELEDMULTIPLE = new EventEmitter();
        this.DZ_COMPLETEMULTIPLE = new EventEmitter();
        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();
        this.DZ_RESET = new EventEmitter();
        this.DZ_QUEUECOMPLETE = new EventEmitter();
        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();
        const dz = Dropzone;
        dz.autoDiscover = false;
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const params = new DropzoneConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        this.renderer.addClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');
        this.renderer.removeClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');
        this.zone.runOutsideAngular(() => {
            this.instance = new Dropzone(this.elementRef.nativeElement, params);
        });
        if (this.disabled) {
            this.instance.disable();
        }
        if (this.DZ_INIT.observers.length) {
            this.zone.run(() => {
                this.DZ_INIT.emit(this.instance);
            });
        }
        // Add auto reset handling for events
        this.instance.on('success', () => {
            if (params.autoReset != null) {
                setTimeout(() => this.reset(), params.autoReset);
            }
        });
        this.instance.on('error', () => {
            if (params.errorReset != null) {
                setTimeout(() => this.reset(), params.errorReset);
            }
        });
        this.instance.on('canceled', () => {
            if (params.cancelReset != null) {
                setTimeout(() => this.reset(), params.cancelReset);
            }
        });
        // Add native Dropzone event handling
        DropzoneEvents.forEach((eventName) => {
            this.instance.on(eventName.toLowerCase(), (...args) => {
                args = (args.length === 1) ? args[0] : args;
                const output = `DZ_${eventName.toUpperCase()}`;
                const emitter = this[output];
                if (emitter.observers.length > 0) {
                    this.zone.run(() => {
                        emitter.emit(args);
                    });
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.destroy();
            });
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (!this.disabled && this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes && this.instance) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === false) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.enable();
                    });
                }
                else if (changes['disabled'].currentValue === true) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.disable();
                    });
                }
            }
        }
    }
    dropzone() {
        return this.instance;
    }
    reset(cancel) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.removeAllFiles(cancel);
            });
        }
    }
};
DropzoneDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Renderer2 },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DROPZONE_CONFIG,] }] }
];
__decorate([
    Input()
], DropzoneDirective.prototype, "disabled", void 0);
__decorate([
    Input('dropzone')
], DropzoneDirective.prototype, "config", void 0);
__decorate([
    Output('init')
], DropzoneDirective.prototype, "DZ_INIT", void 0);
__decorate([
    Output('error')
], DropzoneDirective.prototype, "DZ_ERROR", void 0);
__decorate([
    Output('success')
], DropzoneDirective.prototype, "DZ_SUCCESS", void 0);
__decorate([
    Output('sending')
], DropzoneDirective.prototype, "DZ_SENDING", void 0);
__decorate([
    Output('canceled')
], DropzoneDirective.prototype, "DZ_CANCELED", void 0);
__decorate([
    Output('complete')
], DropzoneDirective.prototype, "DZ_COMPLETE", void 0);
__decorate([
    Output('processing')
], DropzoneDirective.prototype, "DZ_PROCESSING", void 0);
__decorate([
    Output('drop')
], DropzoneDirective.prototype, "DZ_DROP", void 0);
__decorate([
    Output('dragStart')
], DropzoneDirective.prototype, "DZ_DRAGSTART", void 0);
__decorate([
    Output('dragEnd')
], DropzoneDirective.prototype, "DZ_DRAGEND", void 0);
__decorate([
    Output('dragEnter')
], DropzoneDirective.prototype, "DZ_DRAGENTER", void 0);
__decorate([
    Output('dragOver')
], DropzoneDirective.prototype, "DZ_DRAGOVER", void 0);
__decorate([
    Output('dragLeave')
], DropzoneDirective.prototype, "DZ_DRAGLEAVE", void 0);
__decorate([
    Output('thumbnail')
], DropzoneDirective.prototype, "DZ_THUMBNAIL", void 0);
__decorate([
    Output('addedFile')
], DropzoneDirective.prototype, "DZ_ADDEDFILE", void 0);
__decorate([
    Output('removedFile')
], DropzoneDirective.prototype, "DZ_REMOVEDFILE", void 0);
__decorate([
    Output('uploadProgress')
], DropzoneDirective.prototype, "DZ_UPLOADPROGRESS", void 0);
__decorate([
    Output('maxFilesReached')
], DropzoneDirective.prototype, "DZ_MAXFILESREACHED", void 0);
__decorate([
    Output('maxFilesExceeded')
], DropzoneDirective.prototype, "DZ_MAXFILESEXCEEDED", void 0);
__decorate([
    Output('successMultiple')
], DropzoneDirective.prototype, "DZ_SUCCESSMULTIPLE", void 0);
__decorate([
    Output('sendingMultiple')
], DropzoneDirective.prototype, "DZ_SENDINGMULTIPLE", void 0);
__decorate([
    Output('canceledMultiple')
], DropzoneDirective.prototype, "DZ_CANCELEDMULTIPLE", void 0);
__decorate([
    Output('completeMultiple')
], DropzoneDirective.prototype, "DZ_COMPLETEMULTIPLE", void 0);
__decorate([
    Output('processingMultiple')
], DropzoneDirective.prototype, "DZ_PROCESSINGMULTIPLE", void 0);
__decorate([
    Output('reset')
], DropzoneDirective.prototype, "DZ_RESET", void 0);
__decorate([
    Output('queueComplete')
], DropzoneDirective.prototype, "DZ_QUEUECOMPLETE", void 0);
__decorate([
    Output('totalUploadProgress')
], DropzoneDirective.prototype, "DZ_TOTALUPLOADPROGRESS", void 0);
DropzoneDirective = __decorate([
    Directive({
        selector: '[dropzone]',
        exportAs: 'ngxDropzone'
    }),
    __param(4, Inject(PLATFORM_ID)),
    __param(5, Optional()), __param(5, Inject(DROPZONE_CONFIG))
], DropzoneDirective);

let DropzoneComponent = class DropzoneComponent {
    constructor(platformId) {
        this.platformId = platformId;
        this.disabled = false;
        this.message = 'Click or drag files to upload';
        this.placeholder = '';
        this.useDropzoneClass = true;
        this.DZ_INIT = new EventEmitter();
        this.DZ_ERROR = new EventEmitter();
        this.DZ_SUCCESS = new EventEmitter();
        this.DZ_SENDING = new EventEmitter();
        this.DZ_CANCELED = new EventEmitter();
        this.DZ_COMPLETE = new EventEmitter();
        this.DZ_PROCESSING = new EventEmitter();
        this.DZ_DROP = new EventEmitter();
        this.DZ_DRAGSTART = new EventEmitter();
        this.DZ_DRAGEND = new EventEmitter();
        this.DZ_DRAGENTER = new EventEmitter();
        this.DZ_DRAGOVER = new EventEmitter();
        this.DZ_DRAGLEAVE = new EventEmitter();
        this.DZ_THUMBNAIL = new EventEmitter();
        this.DZ_ADDEDFILE = new EventEmitter();
        this.DZ_REMOVEDFILE = new EventEmitter();
        this.DZ_UPLOADPROGRESS = new EventEmitter();
        this.DZ_MAXFILESREACHED = new EventEmitter();
        this.DZ_MAXFILESEXCEEDED = new EventEmitter();
        this.DZ_SUCCESSMULTIPLE = new EventEmitter();
        this.DZ_SENDINGMULTIPLE = new EventEmitter();
        this.DZ_CANCELEDMULTIPLE = new EventEmitter();
        this.DZ_COMPLETEMULTIPLE = new EventEmitter();
        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();
        this.DZ_RESET = new EventEmitter();
        this.DZ_QUEUECOMPLETE = new EventEmitter();
        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        window.setTimeout(() => {
            DropzoneEvents.forEach((eventName) => {
                if (this.directiveRef) {
                    const output = `DZ_${eventName.toUpperCase()}`;
                    const directiveOutput = output;
                    const componentOutput = output;
                    this.directiveRef[directiveOutput] = this[componentOutput];
                }
            });
        }, 0);
    }
    getPlaceholder() {
        return 'url(' + encodeURI(this.placeholder) + ')';
    }
};
DropzoneComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input()
], DropzoneComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], DropzoneComponent.prototype, "config", void 0);
__decorate([
    Input()
], DropzoneComponent.prototype, "message", void 0);
__decorate([
    Input()
], DropzoneComponent.prototype, "placeholder", void 0);
__decorate([
    Input()
], DropzoneComponent.prototype, "useDropzoneClass", void 0);
__decorate([
    Output('init')
], DropzoneComponent.prototype, "DZ_INIT", void 0);
__decorate([
    Output('error')
], DropzoneComponent.prototype, "DZ_ERROR", void 0);
__decorate([
    Output('success')
], DropzoneComponent.prototype, "DZ_SUCCESS", void 0);
__decorate([
    Output('sending')
], DropzoneComponent.prototype, "DZ_SENDING", void 0);
__decorate([
    Output('canceled')
], DropzoneComponent.prototype, "DZ_CANCELED", void 0);
__decorate([
    Output('complete')
], DropzoneComponent.prototype, "DZ_COMPLETE", void 0);
__decorate([
    Output('processing')
], DropzoneComponent.prototype, "DZ_PROCESSING", void 0);
__decorate([
    Output('drop')
], DropzoneComponent.prototype, "DZ_DROP", void 0);
__decorate([
    Output('dragStart')
], DropzoneComponent.prototype, "DZ_DRAGSTART", void 0);
__decorate([
    Output('dragEnd')
], DropzoneComponent.prototype, "DZ_DRAGEND", void 0);
__decorate([
    Output('dragEnter')
], DropzoneComponent.prototype, "DZ_DRAGENTER", void 0);
__decorate([
    Output('dragOver')
], DropzoneComponent.prototype, "DZ_DRAGOVER", void 0);
__decorate([
    Output('dragLeave')
], DropzoneComponent.prototype, "DZ_DRAGLEAVE", void 0);
__decorate([
    Output('thumbnail')
], DropzoneComponent.prototype, "DZ_THUMBNAIL", void 0);
__decorate([
    Output('addedFile')
], DropzoneComponent.prototype, "DZ_ADDEDFILE", void 0);
__decorate([
    Output('removedFile')
], DropzoneComponent.prototype, "DZ_REMOVEDFILE", void 0);
__decorate([
    Output('uploadProgress')
], DropzoneComponent.prototype, "DZ_UPLOADPROGRESS", void 0);
__decorate([
    Output('maxFilesReached')
], DropzoneComponent.prototype, "DZ_MAXFILESREACHED", void 0);
__decorate([
    Output('maxFilesExceeded')
], DropzoneComponent.prototype, "DZ_MAXFILESEXCEEDED", void 0);
__decorate([
    Output('successMultiple')
], DropzoneComponent.prototype, "DZ_SUCCESSMULTIPLE", void 0);
__decorate([
    Output('sendingMultiple')
], DropzoneComponent.prototype, "DZ_SENDINGMULTIPLE", void 0);
__decorate([
    Output('canceledMultiple')
], DropzoneComponent.prototype, "DZ_CANCELEDMULTIPLE", void 0);
__decorate([
    Output('completeMultiple')
], DropzoneComponent.prototype, "DZ_COMPLETEMULTIPLE", void 0);
__decorate([
    Output('processingMultiple')
], DropzoneComponent.prototype, "DZ_PROCESSINGMULTIPLE", void 0);
__decorate([
    Output('reset')
], DropzoneComponent.prototype, "DZ_RESET", void 0);
__decorate([
    Output('queueComplete')
], DropzoneComponent.prototype, "DZ_QUEUECOMPLETE", void 0);
__decorate([
    Output('totalUploadProgress')
], DropzoneComponent.prototype, "DZ_TOTALUPLOADPROGRESS", void 0);
__decorate([
    ViewChild(DropzoneDirective, { static: true })
], DropzoneComponent.prototype, "directiveRef", void 0);
DropzoneComponent = __decorate([
    Component({
        selector: 'dropzone',
        exportAs: 'ngxDropzone',
        template: "<div class=\"dz-wrapper\" [class.dropzone]=\"useDropzoneClass\" [dropzone]=\"config\" [disabled]=\"disabled\" (init)=\"DZ_INIT.emit($event)\">\n  <div class=\"dz-message\" [class.disabled]=\"disabled\" [class.dz-placeholder]=\"placeholder\">\n    <div class=\"dz-text\" [innerHTML]=\"config?.dictDefaultMessage || message\"></div>\n\n    <div *ngIf=\"placeholder\" class=\"dz-image\" [style.background-image]=\"getPlaceholder()\"></div>\n  </div>\n\n  <ng-content></ng-content>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        styles: ["dropzone{display:block;width:100%;height:auto}dropzone[fxflex]{display:-webkit-box;display:flex;flex-direction:inherit;min-width:0;min-height:0;-webkit-box-direction:inherit;-webkit-box-orient:inherit}dropzone[fxflex]>.dropzone.dz-wrapper{flex:1 1 auto;min-width:0;min-height:0;-webkit-box-flex:1}dropzone[fxlayout]{align-items:inherit;align-content:inherit;justify-content:inherit;-webkit-box-align:inherit;-webkit-box-pack:inherit}dropzone[fxlayout]>.dropzone.dz-wrapper.dz-single{display:-webkit-box;display:flex;flex-direction:column;align-items:center;align-content:center;justify-content:center;-webkit-box-align:center;-webkit-box-direction:column;-webkit-box-orient:column;-webkit-box-pack:center}dropzone[fxlayout]>.dropzone.dz-wrapper.dz-multiple{display:-webkit-box;display:flex;flex-flow:row wrap;-webkit-box-align:start;align-items:flex-start;align-content:flex-start;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:flex-start;-webkit-box-direction:row;-webkit-box-orient:row;-webkit-box-pack:flex-start}dropzone>.dropzone.dz-wrapper{position:relative;overflow:auto;width:100%;min-height:0;max-height:100%;padding:0;border:none;color:#666;background:0 0}dropzone>.dropzone.dz-wrapper .dz-message{position:relative;display:inline-block;overflow:auto;width:calc(100% - 16px);min-width:calc(100% - 16px);min-height:40px;max-width:calc(100% - 16px);max-height:100%;margin:8px;border:2px dashed #aaa;background-color:#eee}dropzone>.dropzone.dz-wrapper .dz-message .dz-text{position:absolute;top:50%;width:100%;padding:8px 16px;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%)}dropzone>.dropzone.dz-wrapper .dz-message .dz-image{width:100%;height:100%;background-size:contain;background-repeat:no-repeat;background-position:50% 50%}dropzone>.dropzone.dz-wrapper .dz-message.disabled{cursor:not-allowed}dropzone>.dropzone.dz-wrapper .dz-message.disabled .dz-text{opacity:.5}dropzone>.dropzone.dz-wrapper .dz-message.dz-placeholder{border-color:rgba(#aaa,0)}dropzone>.dropzone.dz-wrapper .dz-message.dz-placeholder .dz-text{position:absolute;z-index:1;top:0;right:10%;left:10%;opacity:0;font-weight:700;background-color:rgba(#fff,.5);-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-transition:opacity 250ms ease-in-out,border-color 250ms ease-in-out,-webkit-filter 250ms ease-in-out;transition:filter 250ms ease-in-out,opacity 250ms ease-in-out,border-color 250ms ease-in-out,-webkit-filter 250ms ease-in-out}dropzone>.dropzone.dz-wrapper .dz-message.dz-placeholder:hover:not(.disabled){border-color:#aaa}dropzone>.dropzone.dz-wrapper .dz-message.dz-placeholder:hover:not(.disabled) .dz-text{opacity:1}dropzone>.dropzone.dz-wrapper .dz-message.dz-placeholder:hover:not(.disabled) .dz-image{-webkit-filter:blur(8px);filter:blur(8px)}dropzone>.dropzone.dz-wrapper .dz-preview{margin:8px}dropzone>.dropzone.dz-wrapper .dz-preview .dz-details{padding:24px}dropzone>.dropzone.dz-wrapper .dz-preview .dz-progress{width:80%;margin-left:-40%;border:1px solid #aaa;border-radius:4px}dropzone>.dropzone.dz-wrapper .dz-preview .dz-progress .dz-upload{background-color:#666}dropzone>.dropzone.dz-wrapper .dz-preview .dz-filename span{display:block;overflow:hidden;width:100%;max-width:100%;text-overflow:ellipsis}dropzone>.dropzone.dz-wrapper .dz-preview .dz-filename span:hover{overflow:visible;white-space:normal;word-wrap:break-word}dropzone>.dropzone.dz-wrapper.dz-single .dz-message{width:100%;height:100%}dropzone>.dropzone.dz-wrapper.dz-single.dz-started .dz-message{display:none}dropzone>.dropzone.dz-wrapper.dz-single .dz-preview{width:calc(100% - 16px);height:100%}dropzone>.dropzone.dz-wrapper.dz-single .dz-preview .dz-image{width:100%;height:100%;border-radius:0}dropzone>.dropzone.dz-wrapper.dz-single .dz-preview .dz-image img{display:block;width:100%;height:auto;margin:0}dropzone>.dropzone.dz-wrapper.dz-single .dz-error-message{top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(100%);transform:translateX(-50%) translateY(100%)}dropzone>.dropzone.dz-wrapper.dz-multiple.dz-started .dz-message{display:inline-block}", "@-webkit-keyframes passing-through{0%{opacity:0;-webkit-transform:translateY(40px);transform:translateY(40px)}30%,70%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-40px);transform:translateY(-40px)}}@keyframes passing-through{0%{opacity:0;-webkit-transform:translateY(40px);transform:translateY(40px)}30%,70%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-40px);transform:translateY(-40px)}}@-webkit-keyframes slide-in{0%{opacity:0;-webkit-transform:translateY(40px);transform:translateY(40px)}30%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes slide-in{0%{opacity:0;-webkit-transform:translateY(40px);transform:translateY(40px)}30%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes pulse{0%,20%{-webkit-transform:scale(1);transform:scale(1)}10%{-webkit-transform:scale(1.1);transform:scale(1.1)}}@keyframes pulse{0%,20%{-webkit-transform:scale(1);transform:scale(1)}10%{-webkit-transform:scale(1.1);transform:scale(1.1)}}.dropzone,.dropzone *{box-sizing:border-box}.dropzone{min-height:150px;border:2px solid rgba(0,0,0,.3);background:#fff;padding:20px}.dropzone.dz-clickable{cursor:pointer}.dropzone.dz-clickable *{cursor:default}.dropzone.dz-clickable .dz-message,.dropzone.dz-clickable .dz-message *{cursor:pointer}.dropzone.dz-started .dz-message{display:none}.dropzone.dz-drag-hover{border-style:solid}.dropzone.dz-drag-hover .dz-message{opacity:.5}.dropzone .dz-message{text-align:center;margin:2em 0}.dropzone .dz-preview{position:relative;display:inline-block;vertical-align:top;margin:16px;min-height:100px}.dropzone .dz-preview:hover{z-index:1000}.dropzone .dz-preview.dz-file-preview .dz-image{border-radius:20px;background:#999;background:-webkit-gradient(linear,left top,left bottom,from(#eee),to(#ddd));background:linear-gradient(to bottom,#eee,#ddd)}.dropzone .dz-preview.dz-file-preview .dz-details{opacity:1}.dropzone .dz-preview.dz-image-preview{background:#fff}.dropzone .dz-preview.dz-image-preview .dz-details{-webkit-transition:opacity .2s linear;transition:opacity .2s linear}.dropzone .dz-preview .dz-remove{font-size:14px;text-align:center;display:block;cursor:pointer;border:none}.dropzone .dz-preview .dz-remove:hover{text-decoration:underline}.dropzone .dz-preview:hover .dz-details{opacity:1}.dropzone .dz-preview .dz-details{z-index:20;position:absolute;top:0;left:0;opacity:0;font-size:13px;min-width:100%;max-width:100%;padding:2em 1em;text-align:center;color:rgba(0,0,0,.9);line-height:150%}.dropzone .dz-preview .dz-details .dz-size{margin-bottom:1em;font-size:16px}.dropzone .dz-preview .dz-details .dz-filename{white-space:nowrap}.dropzone .dz-preview .dz-details .dz-filename:hover span{border:1px solid rgba(200,200,200,.8);background-color:rgba(255,255,255,.8)}.dropzone .dz-preview .dz-details .dz-filename:not(:hover){overflow:hidden;text-overflow:ellipsis}.dropzone .dz-preview .dz-details .dz-filename:not(:hover) span{border:1px solid transparent}.dropzone .dz-preview .dz-details .dz-filename span,.dropzone .dz-preview .dz-details .dz-size span{background-color:rgba(255,255,255,.4);padding:0 .4em;border-radius:3px}.dropzone .dz-preview:hover .dz-image img{-webkit-transform:scale(1.05,1.05);transform:scale(1.05,1.05);-webkit-filter:blur(8px);filter:blur(8px)}.dropzone .dz-preview .dz-image{border-radius:20px;overflow:hidden;width:120px;height:120px;position:relative;display:block;z-index:10}.dropzone .dz-preview .dz-image img{display:block}.dropzone .dz-preview.dz-success .dz-success-mark{-webkit-animation:3s cubic-bezier(.77,0,.175,1) passing-through;animation:3s cubic-bezier(.77,0,.175,1) passing-through}.dropzone .dz-preview.dz-error .dz-error-mark{opacity:1;-webkit-animation:3s cubic-bezier(.77,0,.175,1) slide-in;animation:3s cubic-bezier(.77,0,.175,1) slide-in}.dropzone .dz-preview .dz-error-mark,.dropzone .dz-preview .dz-success-mark{pointer-events:none;opacity:0;z-index:500;position:absolute;display:block;top:50%;left:50%;margin-left:-27px;margin-top:-27px}.dropzone .dz-preview .dz-error-mark svg,.dropzone .dz-preview .dz-success-mark svg{display:block;width:54px;height:54px}.dropzone .dz-preview.dz-processing .dz-progress{opacity:1;-webkit-transition:.2s linear;transition:.2s linear}.dropzone .dz-preview.dz-complete .dz-progress{opacity:0;-webkit-transition:opacity .4s ease-in;transition:opacity .4s ease-in}.dropzone .dz-preview:not(.dz-processing) .dz-progress{-webkit-animation:6s infinite pulse;animation:6s infinite pulse}.dropzone .dz-preview .dz-progress{opacity:1;z-index:1000;pointer-events:none;position:absolute;height:16px;left:50%;top:50%;margin-top:-8px;width:80px;margin-left:-40px;background:rgba(255,255,255,.9);-webkit-transform:scale(1);border-radius:8px;overflow:hidden}.dropzone .dz-preview .dz-progress .dz-upload{background:#333;background:-webkit-gradient(linear,left top,left bottom,from(#666),to(#444));background:linear-gradient(to bottom,#666,#444);position:absolute;top:0;left:0;bottom:0;width:0;-webkit-transition:width .3s ease-in-out;transition:width .3s ease-in-out}.dropzone .dz-preview.dz-error .dz-error-message{display:block}.dropzone .dz-preview.dz-error:hover .dz-error-message{opacity:1;pointer-events:auto}.dropzone .dz-preview .dz-error-message{pointer-events:none;z-index:1000;position:absolute;display:none;opacity:0;-webkit-transition:opacity .3s;transition:opacity .3s;border-radius:8px;font-size:13px;top:130px;left:-10px;width:140px;background:#be2626;background:-webkit-gradient(linear,left top,left bottom,from(#be2626),to(#a92222));background:linear-gradient(to bottom,#be2626,#a92222);padding:.5em 1.2em;color:#fff}.dropzone .dz-preview .dz-error-message:after{content:'';position:absolute;top:-6px;left:64px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #be2626}"]
    }),
    __param(0, Inject(PLATFORM_ID))
], DropzoneComponent);

let DropzoneModule = class DropzoneModule {
};
DropzoneModule = __decorate([
    NgModule({
        imports: [CommonModule],
        declarations: [DropzoneComponent, DropzoneDirective],
        exports: [CommonModule, DropzoneComponent, DropzoneDirective]
    })
], DropzoneModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DROPZONE_CONFIG, DropzoneComponent, DropzoneConfig, DropzoneDirective, DropzoneModule };
//# sourceMappingURL=ngx-dropzone-wrapper.js.map
